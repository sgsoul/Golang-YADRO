// Code generated by MockGen. DO NOT EDIT.
// Source: xkcd.go

// Package mock_xkcd is a generated GoMock package.
package mock_xkcd

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/sgsoul/internal/core"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetComicByID mocks base method.
func (m *MockStorage) GetComicByID(id int) (core.Comic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComicByID", id)
	ret0, _ := ret[0].(core.Comic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComicByID indicates an expected call of GetComicByID.
func (mr *MockStorageMockRecorder) GetComicByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComicByID", reflect.TypeOf((*MockStorage)(nil).GetComicByID), id)
}

// SaveComicToDatabase mocks base method.
func (m *MockStorage) SaveComicToDatabase(comic core.Comic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveComicToDatabase", comic)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveComicToDatabase indicates an expected call of SaveComicToDatabase.
func (mr *MockStorageMockRecorder) SaveComicToDatabase(comic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveComicToDatabase", reflect.TypeOf((*MockStorage)(nil).SaveComicToDatabase), comic)
}
