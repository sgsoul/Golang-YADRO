// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mock_server is a generated GoMock package.
package mock_server

import (
	bytes "bytes"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/sgsoul/internal/core"
	rate "golang.org/x/time/rate"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateUserService mocks base method.
func (m *MockService) CreateUserService(username, password, role string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserService", username, password, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserService indicates an expected call of CreateUserService.
func (mr *MockServiceMockRecorder) CreateUserService(username, password, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserService", reflect.TypeOf((*MockService)(nil).CreateUserService), username, password, role)
}

// Decode mocks base method.
func (m *MockService) Decode(w http.ResponseWriter, r *http.Request, v any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Decode", w, r, v)
}

// Decode indicates an expected call of Decode.
func (mr *MockServiceMockRecorder) Decode(w, r, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockService)(nil).Decode), w, r, v)
}

// GetRateLimiter mocks base method.
func (m *MockService) GetRateLimiter(ip string, rps int) *rate.Limiter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimiter", ip, rps)
	ret0, _ := ret[0].(*rate.Limiter)
	return ret0
}

// GetRateLimiter indicates an expected call of GetRateLimiter.
func (mr *MockServiceMockRecorder) GetRateLimiter(ip, rps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimiter", reflect.TypeOf((*MockService)(nil).GetRateLimiter), ip, rps)
}

// GetUserByUsernameService mocks base method.
func (m *MockService) GetUserByUsernameService(username string) (core.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsernameService", username)
	ret0, _ := ret[0].(core.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsernameService indicates an expected call of GetUserByUsernameService.
func (mr *MockServiceMockRecorder) GetUserByUsernameService(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsernameService", reflect.TypeOf((*MockService)(nil).GetUserByUsernameService), username)
}

// LimitedHandlerService mocks base method.
func (m *MockService) LimitedHandlerService(handler http.HandlerFunc) http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LimitedHandlerService", handler)
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// LimitedHandlerService indicates an expected call of LimitedHandlerService.
func (mr *MockServiceMockRecorder) LimitedHandlerService(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LimitedHandlerService", reflect.TypeOf((*MockService)(nil).LimitedHandlerService), handler)
}

// PrettyPrintService mocks base method.
func (m *MockService) PrettyPrintService(comics []core.Comic) bytes.Buffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrettyPrintService", comics)
	ret0, _ := ret[0].(bytes.Buffer)
	return ret0
}

// PrettyPrintService indicates an expected call of PrettyPrintService.
func (mr *MockServiceMockRecorder) PrettyPrintService(comics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrettyPrintService", reflect.TypeOf((*MockService)(nil).PrettyPrintService), comics)
}

// UpdateDatabase mocks base method.
func (m *MockService) UpdateDatabase(workers int) (core.ComicCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatabase", workers)
	ret0, _ := ret[0].(core.ComicCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatabase indicates an expected call of UpdateDatabase.
func (mr *MockServiceMockRecorder) UpdateDatabase(workers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatabase", reflect.TypeOf((*MockService)(nil).UpdateDatabase), workers)
}

// MockSearch is a mock of Search interface.
type MockSearch struct {
	ctrl     *gomock.Controller
	recorder *MockSearchMockRecorder
}

// MockSearchMockRecorder is the mock recorder for MockSearch.
type MockSearchMockRecorder struct {
	mock *MockSearch
}

// NewMockSearch creates a new mock instance.
func NewMockSearch(ctrl *gomock.Controller) *MockSearch {
	mock := &MockSearch{ctrl: ctrl}
	mock.recorder = &MockSearchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearch) EXPECT() *MockSearchMockRecorder {
	return m.recorder
}

// RelevantURLS mocks base method.
func (m *MockSearch) RelevantURLS(str, indexFile string) ([]string, []core.Comic) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelevantURLS", str, indexFile)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]core.Comic)
	return ret0, ret1
}

// RelevantURLS indicates an expected call of RelevantURLS.
func (mr *MockSearchMockRecorder) RelevantURLS(str, indexFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelevantURLS", reflect.TypeOf((*MockSearch)(nil).RelevantURLS), str, indexFile)
}
